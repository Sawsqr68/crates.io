// =============================================================================
// CRATES.IO OG-IMAGE TEMPLATE
// =============================================================================
// This template generates Open Graph images for crates.io crate.

// =============================================================================
// COLOR PALETTE
// =============================================================================

#let colors = (
    bg: oklch(97%, 0.0147, 98deg),
    header-bg: oklch(36%, 0.07, 144deg),
    header-text: oklch(100%, 0, 0deg),
    primary: oklch(36%, 0.07, 144deg),
    text: oklch(51%, 0.05, 144deg),
    tag-bg: oklch(36%, 0.07, 144deg),
    tag-text: oklch(100%, 0, 0deg),
)

// =============================================================================
// LAYOUT CONSTANTS
// =============================================================================

#let header-height = 60pt

// =============================================================================
// VISUAL COMPONENTS
// =============================================================================

#let render-header = {
    rect(width: 100%, height: header-height, fill: colors.header-bg, {
        place(left + horizon, dx: 30pt, {
            box(baseline: 30%, image("assets/cargo.png", width: 35pt))
            h(10pt)
            text(size: 22pt, fill: colors.header-text, weight: "semibold")[crates.io]
        })
    })
}

// Renders a tag/keyword with consistent styling
#let render-tag(content) = {
    set text(fill: colors.tag-text)
    box(fill: colors.tag-bg, radius: .15em, inset: (x: .4em, y: .25em),
        content
    )
}

#set page(width: 600pt, height: 315pt, margin: 0pt, fill: colors.bg)
#set text(font: "Fira Sans", fill: colors.text)

// Header with crates.io branding
#render-header

// Main content area
#place(
    left + top,
    dy: 60pt,
    block(height: 100% - header-height, inset: 35pt, clip: true, {
        // Crate name
        block(text(size: 36pt, weight: "semibold", fill: colors.primary)[{{ data.name }}])

        // Version
        text(size: 14pt)[Version: {{ data.version }}]
        linebreak()

        // Tags
        {% if data.tags -%}
        {%- for tag in data.tags -%}
        {%- if not loop.first %}
        h(3pt)
        {% endif -%}
        render-tag(text(size: 8pt, weight: "medium")[\#{{ tag }}])
        {%- endfor %}
        linebreak()
        {%- endif %}

        // Description
        block(text(size: 14pt)[{{ data.description }}])

        // License
        text(size: 12pt)[License: {{ data.license }}]
        linebreak()

        // Authors
        text(size: 12pt)[Authors: {{ data.authors | map(attribute="name") | join(", ") }}]
        linebreak()

        // Releases
        text(size: 12pt)[Releases: {{ data.releases }}]
        linebreak()

        {% if data.lines_of_code -%}
        // Lines of Code
        text(size: 12pt)[Lines of Code: {{ data.lines_of_code }}]
        linebreak()
        {%- endif %}

        // Size
        text(size: 12pt)[Size: {{ data.crate_size }} KB]
    })
)

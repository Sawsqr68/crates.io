---
source: crates/crates_io_og_image/src/lib.rs
expression: template_content
---
// =============================================================================
// CRATES.IO OG-IMAGE TEMPLATE
// =============================================================================
// This template generates Open Graph images for crates.io crate.

// =============================================================================
// COLOR PALETTE
// =============================================================================

#let colors = (
    bg: oklch(97%, 0.0147, 98deg),
    header-bg: oklch(36%, 0.07, 144deg),
    header-text: oklch(100%, 0, 0deg),
    primary: oklch(36%, 0.07, 144deg),
    text: oklch(51%, 0.05, 144deg),
    text-light: oklch(60%, 0.05, 144deg),
    tag-bg: oklch(36%, 0.07, 144deg),
    tag-text: oklch(100%, 0, 0deg),
)

// =============================================================================
// LAYOUT CONSTANTS
// =============================================================================

#let header-height = 60pt

// =============================================================================
// TEXT TRUNCATION UTILITIES
// =============================================================================
// These functions handle text overflow by adding ellipsis when content
// exceeds specified dimensions

// Truncates text to fit within a maximum height
// @param text: The text content to truncate
// @param maxHeight: Maximum height constraint (optional, defaults to single line height)
#let truncate_to_height(text, maxHeight: none) = {
    layout(size => {
        let text = text

        let maxHeight = if maxHeight != none {
            maxHeight
        } else {
            measure(text).height
        }

        if measure(width: size.width, text).height <= maxHeight {
            return text
        } else {
            while measure(width: size.width, text + "…").height > maxHeight {
                text = text.slice(0, text.len() - 1).trim()
            }
            return text + "…"
        }
    })
}

// Truncates text to fit within a maximum width
// @param text: The text content to truncate
// @param maxWidth: Maximum width constraint (optional, defaults to container width)
#let truncate_to_width(text, maxWidth: none) = {
    layout(size => {
        let text = text

        let maxWidth = if maxWidth != none {
            maxWidth
        } else {
            size.width
        }

        if measure(text).width <= maxWidth {
            return text
        } else {
            while measure(text + "…").width > maxWidth {
                text = text.slice(0, text.len() - 1).trim()
            }
            return text + "…"
        }
    })
}

// =============================================================================
// VISUAL COMPONENTS
// =============================================================================
// Reusable components for consistent styling

#let render-header = {
    rect(width: 100%, height: header-height, fill: colors.header-bg, {
        place(left + horizon, dx: 30pt, {
            box(baseline: 30%, image("assets/cargo.png", width: 35pt))
            h(10pt)
            text(size: 22pt, fill: colors.header-text, weight: "semibold")[crates.io]
        })
    })
}

// Renders a tag/keyword with consistent styling
#let render-tag(content) = {
    set text(fill: colors.tag-text)
    box(fill: colors.tag-bg, radius: .15em, inset: (x: .4em, y: .25em),
        content
    )
}

// Renders a metadata item with title and content (without icon)
#let render-metadata(title, content) = {
    box(inset: (right: 20pt),
        grid(columns: (auto), rows: (auto, auto), row-gutter: .5em,
            text(size: 8pt, fill: colors.text-light, upper(title)),
            text(size: 12pt, content)
        )
    )
}

#set page(width: 600pt, height: 315pt, margin: 0pt, fill: colors.bg)
#set text(font: "Fira Sans", fill: colors.text)

// Header with crates.io branding
#render-header

// Main content area
#place(
    left + top,
    dy: 60pt,
    block(height: 100% - header-height, inset: 35pt, clip: true, {
        // Crate name
        block(text(size: 36pt, weight: "semibold", fill: colors.primary, truncate_to_width("minimal-crate")))

        

        // Description
        block(text(size: 14pt, weight: "regular", truncate_to_height("A minimal crate", maxHeight: 60pt)))

        // Authors
        set text(size: 10pt, fill: colors.text-light)
        text("by author")

        place(bottom + left, float: true,
            stack(dir: ltr, {
                render-metadata("Releases", "1")
                render-metadata("Latest", truncate_to_width("v1.0.0", maxWidth: 80pt))
                render-metadata("License", truncate_to_width("MIT", maxWidth: 100pt))
                render-metadata("Size", "10 kB")
            })
        )
    })
)
